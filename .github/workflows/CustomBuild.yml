name: Custom Build

on:
  workflow_call:
    inputs:
      arch:
        type: string
        description: Target CPU architecture of WSA.
        required: true
      release_type:
        type: string
        description: WSA Release Channel
        required: true
      root_sol:
        type: string
        description: Root solution
        required: true
      magisk_ver:
        type: string
        description: Magisk Version
        required: true
      gapps_brand:
        type: string
        description: Google Apps brand
        required: true
      remove_amazon:
        description: "Remove Amazon Appstore from the system"
        required: true
        type: string
      custom_command:
        description: "custom command"
        default: ""
        type: string
  workflow_dispatch:
    inputs:
      arch:
        type: choice
        description: Target CPU architecture of WSA.
        required: true
        options: [x64, arm64]
        default: x64
      release_type:
        type: choice
        description: WSA Release Channel
        required: true
        options: 
          - Retail
          - Release Preview
          - Insider Slow
          - Insider Fast
        default: "Retail"
      root_sol:
        type: choice
        description: Root solution
        required: true
        options: 
          - Non-root
          - Magisk Stable
          - Magisk Beta
          - Magisk Canary
          - Magisk Debug
          - KernelSU
        default: "Magisk Stable"
      gapps_brand:
        type: choice
        description: Google Apps brand
        required: true
        options: 
          - MindTheGapps
          - OpenGApps
          - No GApps
        default: "MindTheGapps"
      remove_amazon:
        description: "Remove Amazon Appstore from the system"
        required: true
        default: true
        type: boolean
      custom_command:
        description: "custom command"
        default: ""
        type: string

jobs:
  get_arg:
    name: Get Arguments
    runs-on: ubuntu-latest
    outputs:
      arch: ${{ steps.ga.outputs.arch }}
      release_type: ${{ steps.ga.outputs.release_type }}
      root_sol: ${{ steps.ga.outputs.root_sol }}
      magisk_ver: ${{ steps.ga.outputs.magisk_ver }}
      gapps_brand: ${{ steps.ga.outputs.gapps_brand }}
      remove_amazon: ${{ steps.ga.outputs.remove_amazon }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: '3.9'
      - name: Get Arguments(workflow_call)
        if: github.event_name != 'workflow_dispatch'
        id: ga_c
        run: |
          echo arch='${{ inputs.arch }}' >> $GITHUB_OUTPUT
          echo release_type='${{ inputs.release_type }}' >> $GITHUB_OUTPUT
          echo root_sol='${{ inputs.root_sol }}' >> $GITHUB_OUTPUT
          echo magisk_ver='${{ inputs.magisk_ver }}' >> $GITHUB_OUTPUT
          echo gapps_brand='${{ inputs.gapps_brand }}' >> $GITHUB_OUTPUT
          echo remove_amazon='${{ inputs.remove_amazon }}' >> $GITHUB_OUTPUT

      - name: Get Arguments(workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        id: ga_d
        run: python3 scripts/Issues.py "Custom Build(workflow_dispatch)" "${{ inputs.arch }}" "${{ inputs.release_type }}" "${{ inputs.root_sol }}" "${{ inputs.gapps_brand }}" "${{ inputs.remove_amazon }}"

      - name: output
        id: ga
        run: |
          if [[ ${{ github.event_name }} != "workflow_dispatch" ]]
          then
            echo arch='${{ steps.ga_c.outputs.arch }}' >> $GITHUB_OUTPUT
            echo release_type='${{ steps.ga_c.outputs.release_type }}' >> $GITHUB_OUTPUT
            echo root_sol='${{ steps.ga_c.outputs.root_sol }}' >> $GITHUB_OUTPUT
            echo magisk_ver='${{ steps.ga_c.outputs.magisk_ver }}' >> $GITHUB_OUTPUT
            echo gapps_brand='${{ steps.ga_c.outputs.gapps_brand }}' >> $GITHUB_OUTPUT
            echo remove_amazon='${{ steps.ga_c.outputs.remove_amazon }}' >> $GITHUB_OUTPUT
          fi
          if [[ ${{ github.event_name }} == "workflow_dispatch" ]]
          then
            echo arch='${{ steps.ga_d.outputs.arch }}' >> $GITHUB_OUTPUT
            echo release_type='${{ steps.ga_d.outputs.release_type }}' >> $GITHUB_OUTPUT
            echo root_sol='${{ steps.ga_d.outputs.root_sol }}' >> $GITHUB_OUTPUT
            echo magisk_ver='${{ steps.ga_d.outputs.magisk_ver }}' >> $GITHUB_OUTPUT
            echo gapps_brand='${{ steps.ga_d.outputs.gapps_brand }}' >> $GITHUB_OUTPUT
            echo remove_amazon='${{ steps.ga_d.outputs.remove_amazon }}' >> $GITHUB_OUTPUT
          fi

  check:
    name: Check Update
    needs: get_arg
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get.outputs.WSA_Build_Version }}
    steps:
      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: '3.9'
      - name: Install Dependencies
        run: |
          pip3 install -r MagiskOnWSALocal/scripts/requirements.txt
      - name: Get Latest Version
        id: get
        run: |
          export WSA_WORK_ENV="ENV"
          cd MagiskOnWSALocal/scripts
          touch ENV
          result=$(python3 generateWSALinks.py ${{ needs.get_arg.outputs.arch }} ${{ needs.get_arg.outputs.release_type }} download wsa.zip | grep "WSA Build Version")
          echo ${result// /_} >> "$GITHUB_OUTPUT"
      - name: Echo
        run: |
          echo "LATEST_VERSION=${{ steps.get.outputs.WSA_Build_Version }}"

  build:
    name: Build WSA
    needs: [get_arg, check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: '3.9'
        
      - name: Install Dependencies
        run: |
          pip3 install -r MagiskOnWSALocal/scripts/requirements.txt
          sudo apt update
          sudo apt install -y 7zip lzip patchelf e2fsprogs python3 aria2 attr unzip whiptail qemu-utils p7zip-full python3-venv wine winetricks

      - name: Custom Command
        run: |
          ${{ inputs.custom_command }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: fix 2306
        run: if [ ${LATEST_VERSION%%.*} -ge 2306  ];then cd MagiskOnWSALocal && gh pr checkout 620;fi
        env:
          LATEST_VERSION: ${{ needs.check.outputs.latest_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build WSA
        run: |
          bash -c './MagiskOnWSALocal/scripts/build.sh --release-type ${{ needs.get_arg.outputs.release_type }} --remove-amazon --arch ${{ needs.get_arg.outputs.arch }} --root-sol ${{ needs.get_arg.outputs.root_sol }} --magisk-ver ${{ needs.get_arg.outputs.magisk_ver }} --gapps-brand ${{ needs.get_arg.outputs.gapps_brand }} ${{ needs.get_arg.outputs.remove_amazon }}' || true
          bash -c 'while [[ $(ls ./MagiskOnWSALocal/output/) != *${{ needs.check.outputs.latest_version }}* ]];do rm -rf ./MagiskOnWSALocal/output/* && rm -rf ./MagiskOnWSALocal/download/* && ./MagiskOnWSALocal/scripts/build.sh --release-type ${{ needs.get_arg.outputs.release_type }} --remove-amazon --arch ${{ needs.get_arg.outputs.arch }} --root-sol ${{ needs.get_arg.outputs.root_sol }} --magisk-ver ${{ needs.get_arg.outputs.magisk_ver }} --gapps-brand ${{ needs.get_arg.outputs.gapps_brand }} ${{ needs.get_arg.outputs.remove_amazon }};done' || true
          if [[ $(ls ./MagiskOnWSALocal/output/) != *${{ needs.check.outputs.latest_version }}* ]];then exit 1;fi
          cp DLLs/${{ needs.get_arg.outputs.arch }}/*.dll MagiskOnWSALocal/output/*/WsaClient/
      
      - id: name
        shell: bash
        run: echo "foldername=$(ls MagiskOnWSALocal/output)" >> $GITHUB_OUTPUT

      - name: Copy Installer
        run: cp installer/* "MagiskOnWSALocal/output/${{ steps.name.outputs.foldername }}"

      - name: Compress files
        run: |
          cd MagiskOnWSALocal/output
          7z a -tzip -mx1 -mmt2 -sdel -r "${{ steps.name.outputs.foldername }}.zip" "${{ steps.name.outputs.foldername }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tmp
          path: MagiskOnWSALocal/output/${{ steps.name.outputs.foldername }}.zip

  make-pri:
    name: Merge language resource
    runs-on: windows-latest
    needs: [get_arg, check, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./output/
          name: tmp

      - id: filename
        shell: bash
        run: echo "filename=$(ls output)" >> $GITHUB_OUTPUT

      - name: Extract files
        run: |
          cd output
          7z x "${{ steps.filename.outputs.filename }}"
          rm "${{ steps.filename.outputs.filename }}"

      - id: name
        shell: bash
        run: echo "foldername=$(ls output)" >> $GITHUB_OUTPUT

      - name: Copy makepri from WindowsSDK
        id: copy
        run: cp -Force "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makepri.exe" "./output/${{ steps.name.outputs.foldername }}"

      - name: Merge language resource
        shell: pwsh
        run: |
          cd "./output/${{ steps.name.outputs.foldername }}"
          $ProcMakePri = Start-Process pwsh.exe -PassThru -NoNewWindow -Args "-ExecutionPolicy Bypass -File MakePri.ps1"
          $ProcMakePri.WaitForExit()

      - name: Compact System_ext Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\system_ext.vhdx"') > system_ext.txt
         'attach vdisk readonly' >> system_ext.txt
         'compact vdisk' >> system_ext.txt
         'detach vdisk' >> system_ext.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s system_ext.txt"

      - name: Compact System Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\system.vhdx"') > system.txt
         'attach vdisk readonly' >> system.txt
         'compact vdisk' >> system.txt
         'detach vdisk' >> system.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s system.txt"

      - name: Compact Vendor Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\vendor.vhdx"') > vendor.txt
         'attach vdisk readonly' >> vendor.txt
         'compact vdisk' >> vendor.txt
         'detach vdisk' >> vendor.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s vendor.txt"

      - name: Compact Product Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\product.vhdx"') > product.txt
         'attach vdisk readonly' >> product.txt
         'compact vdisk' >> product.txt
         'detach vdisk' >> product.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s product.txt"

      - name: Compress Files
        run: |
          cd output
          7z a -tzip -mx1 -mmt2 -sdel -r "${{ steps.name.outputs.foldername }}.zip" "${{ steps.name.outputs.foldername }}"

      - name: Remove unused artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: tmp
      
      - name: File Checksum
        shell: pwsh
        run: |
          (Get-FileHash -Path "output\${{ steps.name.outputs.foldername }}.zip" -Algorithm SHA256).Hash | Out-File -FilePath "sha256-checksum.txt"
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.name.outputs.foldername }}
          path: output/${{ steps.name.outputs.foldername }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sha256-checksum
          path: sha256-checksum.txt

      - name: Update builds.json
        run: |
          python scripts/BuildInfo.py "${{ steps.name.outputs.foldername }}" "${{ needs.check.outputs.latest_version }}" ${{ needs.get_arg.outputs.arch }} ${{ needs.get_arg.outputs.root_sol }} ${{ needs.get_arg.outputs.magisk_ver }} ${{ needs.get_arg.outputs.gapps_brand }} ${{ github.run_id }}
          pip install requests
          python scripts/BuildHistory.py
          git config --global user.email github-actions[bot]@users.noreply.github.com
          git config --global user.name github-actions[bot]
          git add builds.json builds.md
          git commit -m "Update builds.json & builds.md: Build ${{ steps.name.outputs.foldername }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}