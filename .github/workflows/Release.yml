name: Release

on:
  workflow_dispatch:
    inputs:
      custom_command:
        description: "custom command"
        default: ""
        type: string
  schedule:
    - cron: '0 */3 * * *'

jobs:
  check:
    name: Check Update
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get.outputs.WSA_Build_Version }}
      current_version: ${{ steps.get_latest_release.outputs.tag_name }}
    steps:
      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: '3.9'
      - name: Install Dependencies
        run: |
          pip3 install -r MagiskOnWSALocal/scripts/requirements.txt
      - name: Get Latest Version
        id: get
        run: |
          export WSA_WORK_ENV="ENV"
          cd MagiskOnWSALocal/scripts
          touch ENV
          result=$(python3 generateWSALinks.py x64 WIF download wsa.zip | grep "WSA Build Version")
          echo ${result// /_} >> "$GITHUB_OUTPUT"
      - name: Get Latest Release
        id: get_latest_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Echo
        run: |
          echo "CURRENT_VERSION=${{ steps.get_latest_release.outputs.tag_name }}"
          echo "LATEST_VERSION=${{ steps.get.outputs.WSA_Build_Version }}"
          if [[ ${{ steps.get_latest_release.outputs.tag_name }} != ${{ steps.get.outputs.WSA_Build_Version }} ]];then echo "Need to Update";fi

  build:
    name: Build WSA
    needs: check
    if: needs.check.outputs.latest_version != needs.check.outputs.current_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['x64', 'arm64']
        root-sol: ['none', 'magisk', 'kernelsu']
        gapps-brand: ['none', 'MindTheGapps']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Repository
        run: git clone https://github.com/LSPosed/MagiskOnWSALocal.git

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          check-latest: true
          python-version: '3.9'
          cache: 'pip'
        
      - name: Install Dependencies
        run: |
          pip3 install -r MagiskOnWSALocal/scripts/requirements.txt
          sudo apt update
          sudo apt install -y 7zip lzip patchelf e2fsprogs python3 aria2 attr unzip whiptail qemu-utils p7zip-full python3-venv wine winetricks

      - name: Custom Command
        if: github.event_name == 'workflow_dispatch'
        run: |
          ${{ inputs.custom_command }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: fix 2306
        run: if [ ${LATEST_VERSION%%.*} -ge 2306  ];then cd MagiskOnWSALocal && gh pr checkout 620;fi
        env:
          LATEST_VERSION: ${{ needs.check.outputs.latest_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build WSA ${{ matrix.arch }} With ${{ matrix.root-sol }} ROOT and ${{ matrix.gapps-brand }} GAPPS
        run: |
          bash -c './MagiskOnWSALocal/scripts/build.sh --release-type WIF --remove-amazon --arch ${{ matrix.arch }} --root-sol ${{ matrix.root-sol }} --gapps-brand ${{ matrix.gapps-brand }}' || true
          bash -c 'while [[ $(ls ./MagiskOnWSALocal/output/) != *${{ needs.check.outputs.latest_version }}* ]];do rm -rf ./MagiskOnWSALocal/output/* && rm -rf ./MagiskOnWSALocal/download/* && ./MagiskOnWSALocal/scripts/build.sh --release-type WIF --remove-amazon --arch ${{ matrix.arch }} --root-sol ${{ matrix.root-sol }} --gapps-brand ${{ matrix.gapps-brand }};done' || true
          if [[ $(ls ./MagiskOnWSALocal/output/) != *${{ needs.check.outputs.latest_version }}* ]];then exit 1;fi
          cp DLLs/${{ matrix.arch }}/*.dll MagiskOnWSALocal/output/*/WsaClient/
      
      - id: name
        shell: bash
        run: echo "foldername=$(ls MagiskOnWSALocal/output)" >> $GITHUB_OUTPUT

      - name: Copy Installer
        run: cp installer/* "MagiskOnWSALocal/output/${{ steps.name.outputs.foldername }}"

      - name: Compress files
        run: |
          cd MagiskOnWSALocal/output
          7z a -tzip -mx1 -mmt2 -sdel -r "${{ steps.name.outputs.foldername }}.zip" "${{ steps.name.outputs.foldername }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }} 
          path: MagiskOnWSALocal/output/${{ steps.name.outputs.foldername }}.zip

  make-pri:
    name: Merge language resource
    runs-on: windows-latest
    needs: [check, build]
    strategy:
      matrix:
        arch: ['x64', 'arm64']
        root-sol: ['none', 'magisk', 'kernelsu']
        gapps-brand: ['none', 'MindTheGapps']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./output/
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }} 

      - id: filename
        shell: bash
        run: echo "filename=$(ls output)" >> $GITHUB_OUTPUT

      - name: Extract files
        run: |
          cd output
          7z x "${{ steps.filename.outputs.filename }}"
          rm "${{ steps.filename.outputs.filename }}"

      - id: name
        shell: bash
        run: echo "foldername=$(ls output)" >> $GITHUB_OUTPUT

      - name: Copy makepri from WindowsSDK
        id: copy
        run: cp -Force "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makepri.exe" "./output/${{ steps.name.outputs.foldername }}"

      - name: Merge language resource
        shell: pwsh
        run: |
          cd "./output/${{ steps.name.outputs.foldername }}"
          $ProcMakePri = Start-Process pwsh.exe -PassThru -NoNewWindow -Args "-ExecutionPolicy Bypass -File MakePri.ps1"
          $ProcMakePri.WaitForExit()

      - name: Compact System_ext Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\system_ext.vhdx"') > system_ext.txt
         'attach vdisk readonly' >> system_ext.txt
         'compact vdisk' >> system_ext.txt
         'detach vdisk' >> system_ext.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s system_ext.txt"

      - name: Compact System Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\system.vhdx"') > system.txt
         'attach vdisk readonly' >> system.txt
         'compact vdisk' >> system.txt
         'detach vdisk' >> system.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s system.txt"

      - name: Compact Vendor Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\vendor.vhdx"') > vendor.txt
         'attach vdisk readonly' >> vendor.txt
         'compact vdisk' >> vendor.txt
         'detach vdisk' >> vendor.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s vendor.txt"

      - name: Compact Product Image
        shell: pwsh
        run: |
         ('select vdisk file="${{ github.workspace }}\output\${{ steps.name.outputs.foldername }}\product.vhdx"') > product.txt
         'attach vdisk readonly' >> product.txt
         'compact vdisk' >> product.txt
         'detach vdisk' >> product.txt
         $p = Start-Process -NoNewWindow -Wait -PassThru "diskpart.exe" "/s product.txt"

      - id: compress
        name: Compress Files
        shell: bash
        run: |
          cd output
          7z a -tzip -mx9 -sdel -r "${{ steps.name.outputs.foldername }}.zip" "${{ steps.name.outputs.foldername }}"
          export filename=$(python ../scripts/ReleaseFile.py "${{ needs.check.outputs.latest_version }}" ${{ matrix.arch }} ${{ matrix.root-sol }} ${{ matrix.gapps-brand }} "${{ steps.name.outputs.foldername }}")
          echo "filename=$filename" >> $GITHUB_OUTPUT
          mv "${{ steps.name.outputs.foldername }}.zip" "$filename.zip"

      - name: Remove unused artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }}
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_${{ matrix.arch }}_${{ matrix.root-sol }}_${{ matrix.gapps-brand }}
          path: |
            output/${{ steps.compress.outputs.filename }}.zip
            output/info.json

  upload:
    name: Upload Releases
    needs: [check, make-pri]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./output/

      - name: Generate Release Body
        env:
          LATEST_VERSION: ${{ needs.check.outputs.latest_version }}
          CURRENT_VERSION: ${{ needs.check.outputs.current_version }}
        run: python3 scripts/ReleaseBody.py

      - name: Commit
        run: |
          pip3 install requests
          python3 scripts/BuildHistory.py
          git pull
          git config --global user.email github-actions[bot]@users.noreply.github.com
          git config --global user.name github-actions[bot]
          git add builds.json builds.md
          git commit -m "Update builds.json & builds.md: Release ${{ needs.check.outputs.latest_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          mkdir release
          mv output/*/*.zip release/

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ needs.check.outputs.latest_version }}
          bodyFile: "Changelog.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "release/*.zip"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseBody
          path: Changelog.md
  
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseJson
          path: builds.json
